{"version":3,"sources":["components/containers/events/events.js"],"names":["Events","props","handleChange","selectedOption","setState","eventFilterStatusSelected","updatingEventStatusFilter","getEvents","value","status","refresh","thisView","fetchingDetails","axios","all","adminService","getEventsProjects","then","res","resData","data","eventsList","map","eachEvent","index","id","_id","details","eventStatus","eventProjectName","eventProjectPlace","eventProjectDescription","length","slice","date","moment","eventProjectDate","format","eventsMain","catch","console","log","message","getfilterEvents","startDate","endDate","sDate","eData","formatEvent","cell","row","to","match","path","className","onClick","e","updateEvent","style","cursor","toggle","sm","deleteEvent","authenticating","msg","state","eventProjectType","location","pathname","indexOf","eventid","apiSuccess","setTimeout","modal","apiError","preventDefault","history","push","filterEvents","event","searchText","target","filter","toLowerCase","filterData","eventFilterStatusOptions","label","selectedStatusFilter","this","eventStatusFilter","content","md","isOpen","marginTop","marginLeft","backgroundColor","color","enableOutsideDays","isOutsideRange","isDayHighlighted","day","isSame","Date","startDateId","endDateId","onDatesChange","focusedInput","onFocusChange","lg","xs","field_search_input","placeholder","onChange","onKeyDown","ref","input","searchInput","pagination","striped","condensed","dataField","dataFormat","isKey","React","Component","connect","auth","dispatch","updateEventStatusFilter"],"mappings":"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","file":"static/js/14.e612da5e.chunk.js","sourcesContent":["import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport axios from 'axios'\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table'\nimport {\n  Row,\n  Col,\n  Card,\n  CardBody,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Alert\n} from 'reactstrap'\nimport adminService from '../../services/adminService'\nimport moment from 'moment'\nimport { connect } from 'react-redux'\nimport { updateEventStatusFilter } from '../../../store/actions/auth'\nimport './events.scss'\nimport { DateRangePicker } from 'react-dates'\nimport 'react-dates/lib/css/_datepicker.css'\nimport 'react-dates/initialize'\n\nimport Translate from 'react-translate-component'\nimport PageLoading from '../../elements/pageLoading/pageLoading'\n\nclass Events extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      startDate: null,\n      endDate: null,\n      msg: true,\n      apiSuccess: '',\n      eventsList: [],\n      eventid: '',\n      modal: false,\n      eventsMain: [],\n      searchText: '',\n      authenticating: false,\n      fetchingDetails: false,\n      eventFilterStatusOptions: [\n        { label: 'Pending', value: 'Pending' },\n        { label: 'In Progress', value: 'In Progress' },\n        { label: 'Closed', value: 'Closed' }\n      ],\n      eventFilterStatusSelected: { label: 'Pending', value: 'Pending' }\n    }\n  }\n\n  componentDidMount () {\n    let selectedStatusFilter = this.props.eventStatusFilter\n      ? this.props.eventStatusFilter\n      : this.state.eventFilterStatusSelected\n    this.setState({ eventFilterStatusSelected: selectedStatusFilter })\n    this.getEvents(selectedStatusFilter.value)\n  }\n\n  handleChange = selectedOption => {\n    this.setState({ eventFilterStatusSelected: selectedOption })\n    this.props.updatingEventStatusFilter(selectedOption)\n    this.getEvents(selectedOption.value)\n  }\n\n  getEvents = (status, refresh = false) => {\n    var thisView = this\n    if (!refresh) thisView.setState({ fetchingDetails: true })\n    axios\n      .all([adminService.getEventsProjects('Event', status)])\n      .then(function (res) {\n        if (res[0]) {\n          let resData = res[0].data\n          let events = resData.data ? resData.data : []\n          let eventsList = events.map((eachEvent, index) => {\n            return {\n              id: eachEvent._id,\n              details: {\n                index: index,\n                id: eachEvent._id,\n                status: eachEvent.eventStatus,\n                eventProjectName: eachEvent.eventProjectName,\n                eventProjectPlace: eachEvent.eventProjectPlace,\n                eventProjectDescription:\n                  eachEvent.eventProjectDescription &&\n                  eachEvent.eventProjectDescription.length > 250\n                    ? eachEvent.eventProjectDescription.slice(0, 250) + '...'\n                    : eachEvent.eventProjectDescription.slice(0, 250),\n                date: moment(eachEvent.eventProjectDate).format(\n                  'Do MMM YYYY hh:mm A'\n                )\n                  ? moment(eachEvent.eventProjectDate).format(\n                      'Do MMM YYYY hh:mm A'\n                    )\n                  : ''\n              }\n            }\n          })\n          thisView.setState({ eventsList, eventsMain: eventsList })\n        }\n\n        thisView.setState({ fetchingDetails: false })\n      })\n      .catch(function (res) {\n        console.log(res)\n        if (res.message) console.log('An error occurred in change Password')\n      })\n  }\n\n  getfilterEvents = (startDate, endDate) => {\n    // const { startDate, endDate } = this.state;\n\n    let sDate = startDate ? moment(startDate).format('YYYY-MM-DD') : null\n    let eData = endDate ? moment(endDate).format('YYYY-MM-DD') : null\n\n    var thisView = this\n    thisView.setState({ fetchingDetails: true })\n    axios\n      .all([adminService.getfilterEvents('Event', sDate, eData)])\n      .then(function (res) {\n        if (res[0]) {\n          let resData = res[0].data\n          let events = resData.data ? resData.data : []\n          let eventsList = events.map((eachEvent, index) => {\n            return {\n              id: eachEvent._id,\n              details: {\n                index: index,\n                id: eachEvent._id,\n                status: eachEvent.eventStatus,\n                eventProjectName: eachEvent.eventProjectName,\n                eventProjectPlace: eachEvent.eventProjectPlace,\n                eventProjectDescription:\n                  eachEvent.eventProjectDescription &&\n                  eachEvent.eventProjectDescription.length > 250\n                    ? eachEvent.eventProjectDescription.slice(0, 250) + '...'\n                    : eachEvent.eventProjectDescription.slice(0, 250),\n                date: moment(eachEvent.eventProjectDate).format(\n                  'Do MMM YYYY hh:mm A'\n                )\n                  ? moment(eachEvent.eventProjectDate).format(\n                      'Do MMM YYYY hh:mm A'\n                    )\n                  : ''\n              }\n            }\n          })\n          thisView.setState({ eventsList, eventsMain: eventsList })\n        }\n\n        thisView.setState({ fetchingDetails: false })\n      })\n      .catch(function (res) {\n        console.log(res)\n        if (res.message) console.log('An error occurred in change Password')\n      })\n  }\n\n  formatEvent = (cell, row) => {\n    return (\n      <div>\n        <NavLink\n          to={this.props.match.path + '/' + cell.id}\n          className='mlac-each'\n        >\n          <div className='mlace-head'>\n            <span>{cell.eventProjectName}</span>\n            <span className='mlacer-date'>{cell.date}</span>\n            <span className='mlac-status'>\n              <i\n                className='fa fa-edit mlac-edit'\n                onClick={e => {\n                  this.updateEvent(e, cell)\n                }}\n              />\n            </span>\n            <span>\n              <i\n                className='fa fa-trash mlac-delete'\n                style={{ cursor: 'pointer' }}\n                onClick={e => {\n                  this.toggle(e, cell.id)\n                }}\n              />\n            </span>\n          </div>\n          <span className='mlace-content' sm={12}>\n            {cell.eventProjectDescription}\n          </span>\n        </NavLink>\n      </div>\n    )\n  }\n\n  deleteEvent = () => {\n    var thisView = this\n    thisView.setState({ authenticating: true, msg: !this.state.msg })\n\n    let eventProjectType = ''\n    // let contactid = this.props.match.id;\n    if (this.props.location.pathname.indexOf('events') > -1) {\n      eventProjectType = 'Event'\n    }\n\n    this.setState({ authenticating: true })\n    axios\n      .all([adminService.deleteEvent(this.state.eventid, eventProjectType)])\n      .then(function (res) {\n        if (res[0]) {\n          let resData = res[0].data\n          if (resData.status) {\n            thisView.setState({ apiSuccess: 'Event deleted successfully ' })\n\n            // if (insertType === \"\")\n            //     thisView.props.history.push(\"/contacts\");\n            // else if (insertType === \"headOfService\")\n            //     thisView.props.history.push(\"/serviceheads\");\n\n            // setTimeout(() => window.location.reload(), thisView.props.history.push(\"/contacts\"), window.location.reload(), 4000);\n\n            setTimeout(\n              () => thisView.setState({ modal: !thisView.state.modal }),\n              1000\n            )\n            // setTimeout(() => thisView.getEvents(), 2000);\n            thisView.getEvents('', true)\n          } else {\n            thisView.setState({ apiError: resData.msg })\n          }\n        }\n        thisView.setState({ authenticating: false })\n        // setTimeout(() => window.location.reload(), thisView.setState({ modal: false }), 4000);\n      })\n      .catch(function (res) {\n        console.log(res)\n        if (res.message) console.log('An error occurred in change Password')\n      })\n  }\n\n  toggle = (e, cell) => {\n    e.preventDefault()\n    if (cell) {\n      this.setState({ eventid: cell })\n    }\n    this.setState({\n      modal: !this.state.modal\n    })\n    console.log(cell)\n  }\n\n  updateEvent = (e, cell) => {\n    e.preventDefault()\n    this.props.history.push(this.props.match.path + '/update/' + cell.id)\n  }\n\n  filterEvents = event => {\n    let searchText = this.state.searchText\n    if (event) searchText = event.target.value\n\n    let eventsList = []\n    if (searchText && searchText.length >= 2) {\n      eventsList = this.state.eventsMain.filter(eachEvent => {\n        if (\n          eachEvent.details.eventProjectName\n            .toLowerCase()\n            .indexOf(searchText.toLowerCase()) > -1 ||\n          eachEvent.details.eventProjectPlace\n            .toLowerCase()\n            .indexOf(searchText.toLowerCase()) > -1 ||\n          eachEvent.details.date\n            .toLowerCase()\n            .indexOf(searchText.toLowerCase()) > -1\n        )\n          return true\n        else return false\n      })\n    } else {\n      eventsList = this.state.eventsMain\n    }\n\n    this.setState({ searchText, eventsList })\n  }\n\n  filterData = (startDate, endDate) => {\n    this.getfilterEvents(startDate, endDate)\n  }\n\n  render () {\n    const { eventStatusFilter, match } = this.props\n    const {\n      eventsList,\n      fetchingDetails,\n      eventFilterStatusSelected\n    } = this.state\n    let selectedStatusFilter = eventStatusFilter\n      ? eventStatusFilter\n      : eventFilterStatusSelected\n\n    return (\n      <div className='col-span-12 mla-events'>\n        <div className='col-span-12 xxl:col-span-9'>\n          <div className='intro-y flex items-end mt-10'>\n            {/* <h2 className='text-lg text-black font-medium'></h2> */}\n            <NavLink\n              to={match.path + '/add'}\n              className='ml-auto flex text-theme-1 btn custom-btn'\n            >\n              <Translate content='add' />\n            </NavLink>\n          </div>\n        </div>\n        <Row className='intro-y mt-3 mb-3'>\n          <Col md={8}>\n            <h2 className='font-weight-bold'>\n              {/* <Translate content=\"events\" /> */}\n              Activities & Announcements\n            </h2>\n          </Col>\n          <Col md={4}>\n            <i\n              className='fa fa-refresh mlac-refresh'\n              onClick={() => {\n                this.getEvents(selectedStatusFilter.value)\n              }}\n            />\n          </Col>\n        </Row>\n\n        <Modal\n          isOpen={this.state.modal}\n          style={{ marginTop: '0px', marginLeft: '0px' }}\n        >\n          <ModalHeader\n            style={{ backgroundColor: '#253c80', color: 'white' }}\n            toggle={this.toggle}\n          >\n            Confimation{' '}\n          </ModalHeader>\n          <ModalBody>\n            {this.state.msg && (\n              <p>Are you sure you want to delete this Event</p>\n            )}\n            {this.state.apiSuccess && (\n              <div className='errormsg'>\n                <Alert color='success'>{this.state.apiSuccess}</Alert>\n              </div>\n            )}\n          </ModalBody>\n          <ModalFooter>\n            {!this.state.authenticating ? (\n              <Button\n                className=' btn btn-primary '\n                color='danger'\n                onClick={this.deleteEvent}\n              >\n                <span className='text-white'>Delete</span>\n              </Button>\n            ) : (\n              <i className='fa fa-spin fa-refresh authentication-loading' />\n            )}\n          </ModalFooter>\n        </Modal>\n\n        <Row className={'intro-y'}>\n          <Col sm md={7}></Col>\n\n          <Col sm md={5} className='date-filter'>\n            <DateRangePicker\n              enableOutsideDays={true}\n              isOutsideRange={() => false}\n              isDayHighlighted={day => day.isSame(new Date(), 'd')}\n              startDate={this.state.startDate} // momentPropTypes.momentObj or null,\n              startDateId='your_unique_start_date_id' // PropTypes.string.isRequired,\n              endDate={this.state.endDate} // momentPropTypes.momentObj or null,\n              endDateId='your_unique_end_date_id' // PropTypes.string.isRequired,\n              onDatesChange={({ startDate, endDate }) => {\n                this.setState({ startDate, endDate })\n                this.filterData(startDate, endDate)\n              }} // PropTypes.func.isRequired,\n              focusedInput={this.state.focusedInput} // PropTypes.oneOf([START_DATE, END_DATE]) or null,\n              onFocusChange={focusedInput => this.setState({ focusedInput })} // PropTypes.func.isRequired,\n            />\n          </Col>\n          {!fetchingDetails ? (\n            <Col sm md lg={12} className='mb-30'>\n              <Card className='card-statistics h-100'>\n                <Row className='mlac-search-container'>\n                  <Col xs={12} sm={12} md={6} lg={8}>\n                    {/* <Select\n                                                name=\"mlac-status-filter\" className=\"selectbox mlac-status-filter w-full flex-1\"\n                                                onChange={this.handleChange}\n                                                placeholder=\"Status Filter\"\n                                                options={eventFilterStatusOptions}\n                                                value={eventFilterStatusSelected}\n                                                isSearchable\n                                                style={{ border: 'none !important' }}\n                                                isLoading={fetchingDetails}\n                                                isDisabled={fetchingDetails}\n                                            /> */}\n                  </Col>\n                  <Col xs={12} sm={12} md={6} lg={4}>\n                    <input\n                      className='form-control mlac-search'\n                      value={this.state.field_search_input}\n                      placeholder={'Search'}\n                      onChange={this.filterEvents}\n                      onKeyDown={this.filterEvents}\n                      ref={input => {\n                        this.searchInput = input\n                      }}\n                    />\n                  </Col>\n                </Row>\n\n                <CardBody>\n                  <BootstrapTable\n                    data={eventsList}\n                    pagination\n                    striped\n                    condensed\n                    // search\n                  >\n                    <TableHeaderColumn\n                      className='mlac-row'\n                      dataField='details'\n                      dataFormat={this.formatEvent}\n                      isKey\n                    ></TableHeaderColumn>\n                  </BootstrapTable>\n                </CardBody>\n              </Card>\n            </Col>\n          ) : (\n            <PageLoading />\n          )}\n        </Row>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  eventStatusFilter: state.auth.eventStatusFilter\n})\n\nconst mapDispatchToProps = dispatch => ({\n  updatingEventStatusFilter (data) {\n    dispatch(updateEventStatusFilter(data))\n  }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Events)\n"],"sourceRoot":""}