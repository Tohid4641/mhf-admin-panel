{"version":3,"sources":["components/containers/renewalRequest/renewalRequest.js"],"names":["RenewalRequest","props","usersListByMembershipStatus","status","skip","searchTerm","thisView","setState","fetchingDetails","details","memberShipStatus","limit","state","search","membersToken","cancel","axios","CancelToken","source","all","adminService","token","then","res","resData","data","membersData","membersCount","membersList","members","map","eachMember","index","id","_id","sNo","statusMember","activePage","parseInt","pages","Success_msg","apiError","catch","console","log","message","renewPlan","cell","row","className","to","match","path","uploadFormatter","email","formateCreatedOn","createdAt","moment","Date","diff","formateExpiredOn","expiryDate","updateContact","formatName","displayDate","format","onStatusSelected","selectedStatus","value","paginationClicked","page","searchMember","msg","apiSuccess","modal","memberId","authenticating","label","exporting","toggle","bind","this","placeholder","minLength","debounceTimeout","onChange","event","target","sm","md","lg","striped","condensed","width","dataField","isKey","dataFormat","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","itemClass","linkClass","firstPageText","prevPageText","nextPageText","lastPageText","React","Component","connect","config","auth","dispatch"],"mappings":"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","file":"static/js/21.16c9946c.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { BootstrapTable, TableHeaderColumn } from \"react-bootstrap-table\";\nimport { connect } from \"react-redux\";\nimport Pagination from \"react-js-pagination\";\nimport { Row, Col, Card, CardBody } from \"reactstrap\";\nimport { DebounceInput } from \"react-debounce-input\";\n\nimport adminService from \"../../services/adminService\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport \"./renewalRequest.scss\";\nimport PageLoading from \"../../elements/pageLoading/pageLoading\";\n\nclass RenewalRequest extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      membersList: [],\n      fetchingDetails: false,\n      msg: true,\n      apiSuccess: \"\",\n      modal: false,\n      memberId: \"\",\n      authenticating: false,\n      selectedStatus: { label: \"Approved\", value: \"Approved\" },\n      skip: 0,\n      limit: 30,\n      pages: {},\n      membersCount: 0,\n      activePage: 0,\n      searchTerm: \"\",\n      exporting: false,\n    };\n\n    this.membersToken = null;\n    this.toggle = this.toggle.bind(this);\n  }\n  componentDidMount() {\n    this.usersListByMembershipStatus(\"Renewal\");\n  }\n\n  usersListByMembershipStatus = (status, skip = 0, searchTerm = \"\") => {\n    var thisView = this;\n    thisView.setState({ fetchingDetails: true });\n    const details = {\n      memberShipStatus: status,\n      skip,\n      limit: this.state.limit,\n    };\n\n    if (searchTerm && searchTerm != \"\") {\n      details.search = searchTerm;\n    }\n\n    if (this.membersToken) this.membersToken.cancel();\n    this.membersToken = axios.CancelToken.source();\n\n    axios\n      .all([\n        adminService.usersListByMembershipStatus(\n          this.membersToken.token,\n          details\n        ),\n      ])\n      .then(function (res) {\n        if (res[0]) {\n          let resData = res[0].data;\n          if (resData.status) {\n            let membersData = resData.data ? resData.data : [];\n            let membersCount = membersData.membersCount\n              ? membersData.membersCount\n              : 0;\n            let membersList = membersData.members ? membersData.members : [];\n            membersList = membersList.map((eachMember, index) => {\n              return {\n                ...eachMember,\n                id: eachMember._id,\n                sNo: skip + index + 1,\n                statusMember: \"Pending\",\n              };\n            });\n            let activePage = 0;\n            if (membersCount !== 0 && skip !== 0) {\n              activePage = parseInt(skip / thisView.state.limit);\n            }\n\n            let pages = thisView.state.pages;\n            pages[\"page_\" + activePage] = membersList;\n            thisView.setState({ membersList, membersCount, pages, activePage });\n\n            thisView.setState({ Success_msg: \"\" });\n          } else {\n            thisView.setState({ apiError: resData });\n          }\n        }\n        thisView.setState({ fetchingDetails: false });\n      })\n      .catch(function (res) {\n        console.log(res);\n        if (res.message) console.log(\"An error occurred in change Password\");\n      });\n  };\n  renewPlan = (cell, row) => {\n    return (\n      <div className=\"mlace-head\">\n        <NavLink\n          className=\"review-btn btn\"\n          to={this.props.match.path + \"/renew/\" + row.id}\n        >\n          Renew\n        </NavLink>\n      </div>\n    );\n  };\n  uploadFormatter = (cell, row) => {\n    return (\n      <div className=\"mlace-head\">\n        {row.email && (\n          <>\n            {/* <span\n              className={`member-status mr-2 ${\n                row.memberShipStatus ? row.memberShipStatus.toLowerCase() : \"\"\n              }`}\n            >\n              {row.memberShipStatus}\n            </span> */}\n            <NavLink\n              className=\"review-btn mr-3 btn\"\n              to={this.props.match.path + \"/\" + row._id}\n            >\n              Details\n            </NavLink>\n          </>\n        )}\n      </div>\n    );\n  };\n\n  formateCreatedOn = (cell, row) => {\n    return (\n      <div className=\"mlace-head\">\n        {row.createdAt && (\n          <span>\n            {moment(new Date()).diff(moment(row.createdAt), \"days\") === 0\n              ? \"Today\"\n              : moment(new Date()).diff(moment(row.createdAt), \"days\") === 1\n              ? moment(new Date()).diff(moment(row.createdAt), \"day\") + \" Day\"\n              : moment(new Date()).diff(moment(row.createdAt), \"day\") + \" Days\"}\n          </span>\n        )}\n      </div>\n    );\n  };\n  formateExpiredOn = (cell, row) => {\n    return (\n      <div className=\"mlace-head\">\n        {row.expiryDate && (\n          <span>\n            {moment(moment(row.expiryDate)).diff(new Date(), \"days\") === 0\n              ? \"Today\"\n              : moment(moment(row.expiryDate)).diff(new Date(), \"days\") === 1\n              ? moment(moment(row.expiryDate)).diff(new Date(), \"day\") + \" Day\"\n              : moment(moment(row.expiryDate)).diff(new Date(), \"day\") +\n                \" Days\"}\n          </span>\n        )}\n      </div>\n    );\n  };\n\n  updateContact = (row, cell) => {\n    return (\n      <NavLink to={this.props.match.path + \"/update/\" + row.id}>{cell}</NavLink>\n    );\n  };\n\n  formatName = (cell, row) => {\n    return (\n      <NavLink to={this.props.match.path + \"/card/\" + row._id}>{cell}</NavLink>\n    );\n  };\n  displayDate = (cell, row) => {\n    return <p>{cell ? moment(cell).format(\"DD/MM/YYYY\") : \"\"}</p>;\n  };\n  toggle(id) {\n    if (id) {\n      this.setState({ memberId: id });\n    }\n    this.setState({\n      modal: !this.state.modal,\n    });\n  }\n  onStatusSelected = (selectedStatus) => {\n    this.setState(\n      {\n        selectedStatus,\n        skip: 0,\n      },\n      () => {\n        this.usersListByMembershipStatus(\n          selectedStatus.value,\n          0,\n          this.state.searchTerm\n        );\n      }\n    );\n  };\n\n  paginationClicked = (page) => {\n    console.log(page);\n    if (this.state.pages && this.state.pages[\"page_\" + (page - 1)]) {\n      console.log(this.state.pages);\n      this.setState({\n        membersList: this.state.pages[\"page_\" + (page - 1)],\n        activePage: page - 1,\n      });\n    } else {\n      this.setState({ skip: this.state.limit * (page - 1) });\n      this.usersListByMembershipStatus(\n        this.state.selectedStatus.value,\n        this.state.limit * (page - 1),\n        this.state.searchTerm\n      );\n    }\n  };\n\n  searchMember = (searchTerm) => {\n    console.log(searchTerm);\n    this.setState({ skip: 0, searchTerm }, () => {\n      this.usersListByMembershipStatus(\n        this.state.selectedStatus.value,\n        0,\n        searchTerm\n      );\n    });\n  };\n\n  render() {\n    const { match } = this.props;\n    const { fetchingDetails, membersList } = this.state;\n\n    return (\n      <div className=\"col-span-12 membership\">\n        <div className=\"intro-y col-span-12\">\n          <div className=\"intro-y flex items-end mt-10 mb-10\">\n            <h2 className=\"text-lg text-black font-medium\">\n              Renewal Requests\n            </h2>\n            <div className=\"membership-search-box\">\n              <DebounceInput\n                placeholder=\"Search\"\n                minLength={3}\n                debounceTimeout={300}\n                onChange={(event) => {\n                  this.searchMember(event.target.value);\n                }}\n              />\n            </div>\n          </div>\n          {/* main body */}\n          <Row className={\"intro-y\"}>\n            {\n              // !fetchingDetails &&\n              <>\n                <Col sm md lg={12} className=\"mb-30\">\n                  <Card className=\"card-statistics h-100\">\n                    <CardBody>\n                      <BootstrapTable\n                        data={membersList}\n                        // pagination\n                        striped\n                        condensed\n                        // search\n                      >\n                        <TableHeaderColumn width=\"40\" dataField=\"sNo\" isKey>\n                          {\" \"}\n                          SNo\n                        </TableHeaderColumn>\n                        <TableHeaderColumn\n                          width=\"100\"\n                          dataField=\"name\"\n                          dataFormat={this.formatName}\n                        >\n                          {\" \"}\n                          Name\n                        </TableHeaderColumn>\n                        <TableHeaderColumn width=\"120\" dataField=\"email\">\n                          {\" \"}\n                          Email\n                        </TableHeaderColumn>\n                        <TableHeaderColumn width=\"100\" dataField=\"mobileNo\">\n                          {\" \"}\n                          Mobile Number\n                        </TableHeaderColumn>\n                        <TableHeaderColumn width=\"80\" dataField=\"maritalStatus\">\n                          {\" \"}\n                          Marital Status\n                        </TableHeaderColumn>\n                        <TableHeaderColumn\n                          width=\"100\"\n                          dataField=\"createdAt\"\n                          dataFormat={this.displayDate}\n                        >\n                          {\" \"}\n                          Created At\n                        </TableHeaderColumn>\n                        <TableHeaderColumn\n                          width=\"120\"\n                          dataField=\"expiryDate\"\n                          dataFormat={this.displayDate}\n                        >\n                          Expiry Date\n                        </TableHeaderColumn>\n                        <TableHeaderColumn\n                          width=\"120\"\n                          dataFormat={this.formateExpiredOn}\n                        >\n                          Expired On\n                        </TableHeaderColumn>\n                        <TableHeaderColumn\n                          width=\"120\"\n                          dataFormat={this.uploadFormatter}\n                        >\n                          Actions\n                        </TableHeaderColumn>\n                      </BootstrapTable>\n                    </CardBody>\n                  </Card>\n                </Col>\n                <Pagination\n                  activePage={this.state.activePage + 1}\n                  itemsCountPerPage={this.state.limit}\n                  totalItemsCount={this.state.membersCount}\n                  pageRangeDisplayed={10}\n                  itemClass=\"page-item\"\n                  linkClass=\"page-link\"\n                  onChange={this.paginationClicked}\n                  firstPageText={\"First\"}\n                  prevPageText={\"Prev\"}\n                  nextPageText={\"Next\"}\n                  lastPageText={\"Last\"}\n                />\n              </>\n            }\n            {fetchingDetails && <PageLoading />}\n          </Row>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  config: state.auth.config,\n});\n\nconst mapDispatchToProps = (dispatch) => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RenewalRequest);\n"],"sourceRoot":""}