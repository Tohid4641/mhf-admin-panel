{"version":3,"sources":["components/containers/projects/projects.js"],"names":["Projects","props","handleChange","selectedOption","setState","projectFilterStatusSelected","updatingprojectStatusFilter","getProjectEvents","value","status","refresh","thisView","fetchingDetails","axios","all","adminService","getEventsProjects","then","res","resData","data","projectsList","map","eachEvent","index","id","_id","details","eventProjectName","eventProjectPlace","eventProjectDate","eventProjectDescription","length","slice","date","moment","createdAt","format","projectsMain","catch","console","log","message","getfilterProjects","startDate","endDate","sDate","eData","getfilterEvents","formatProject","cell","row","to","match","path","className","onClick","e","updateProjectEvents","style","cursor","toggle","sm","deleteEvent","authenticating","msg","state","eventProjectType","location","pathname","indexOf","projectid","apiSuccess","setTimeout","modal","apiError","preventDefault","history","push","filterProject","event","searchText","target","filter","eachProject","toLowerCase","filterData","projects","projectFilterStatusOptions","label","selectedStatusFilter","this","projectStatusFilter","projecttFilterStatusSelected","content","md","isOpen","marginTop","marginLeft","backgroundColor","color","enableOutsideDays","isOutsideRange","isDayHighlighted","day","isSame","Date","startDateId","endDateId","onDatesChange","focusedInput","onFocusChange","lg","xs","field_search_input","placeholder","onChange","onKeyDown","ref","input","searchInput","pagination","striped","condensed","dataField","dataFormat","isKey","React","Component","connect","auth","dispatch"],"mappings":"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","file":"static/js/20.96d70b90.chunk.js","sourcesContent":["import React from 'react'\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table'\nimport { NavLink } from 'react-router-dom'\nimport {\n  Row,\n  Col,\n  Card,\n  CardBody,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Alert\n} from 'reactstrap'\nimport './projects.scss'\nimport adminService from '../../services/adminService'\nimport moment from 'moment'\n// import Select from 'react-select';\nimport { connect } from 'react-redux'\nimport axios from 'axios'\nimport { DateRangePicker } from 'react-dates'\nimport 'react-dates/lib/css/_datepicker.css'\nimport 'react-dates/initialize'\n\nimport Translate from 'react-translate-component'\n\nclass Projects extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      msg: true,\n      apiSuccess: '',\n      projectid: '',\n      modal: false,\n      startDate: null,\n      endDate: null,\n      projects: [],\n      projectsMain: [],\n      searchText: '',\n      fetchingDetails: false,\n      projectFilterStatusOptions: [\n        { label: 'Pending', value: 'Pending' },\n        { label: 'In Progress', value: 'In Progress' },\n        { label: 'Closed', value: 'Closed' }\n      ],\n      projectFilterStatusSelected: { label: 'Pending', value: 'Pending' }\n    }\n  }\n\n  componentDidMount () {\n    let selectedStatusFilter = this.props.projectStatusFilter\n      ? this.props.projectStatusFilter\n      : this.state.projectFilterStatusSelected\n    this.setState({ projecttFilterStatusSelected: selectedStatusFilter })\n    this.getProjectEvents(selectedStatusFilter.value)\n  }\n\n  handleChange = selectedOption => {\n    this.setState({ projectFilterStatusSelected: selectedOption })\n    this.props.updatingprojectStatusFilter(selectedOption)\n    this.getProjectEvents(selectedOption.value)\n  }\n\n  getProjectEvents = (status, refresh = false) => {\n    var thisView = this\n    if (!refresh) thisView.setState({ fetchingDetails: true })\n    axios\n      .all([adminService.getEventsProjects('Project', status)])\n      .then(function (res) {\n        if (res[0]) {\n          let resData = res[0].data\n          let projects = resData.data ? resData.data : []\n          let projectsList = projects.map((eachEvent, index) => {\n            return {\n              id: eachEvent._id,\n              details: {\n                index: index,\n                id: eachEvent._id,\n                eventProjectName: eachEvent.eventProjectName,\n                eventProjectPlace: eachEvent.eventProjectPlace,\n                eventProjectDate: eachEvent.eventProjectDate,\n                eventProjectDescription:\n                  eachEvent.eventProjectDescription &&\n                  eachEvent.eventProjectDescription.length > 250\n                    ? eachEvent.eventProjectDescription.slice(0, 250) + '...'\n                    : eachEvent.eventProjectDescription.slice(0, 250),\n                date: moment(eachEvent.createdAt).format('Do MMM YYYY hh:mm A')\n              }\n            }\n          })\n          // thisView.searchInput.focus();\n          thisView.setState({ projectsList, projectsMain: projectsList })\n        }\n        thisView.setState({ fetchingDetails: false })\n      })\n      .catch(function (res) {\n        console.log(res)\n        if (res.message) console.log('An error occurred in project list')\n      })\n  }\n\n  getfilterProjects = (startDate, endDate) => {\n    // const { startDate, endDate } = this.state;\n\n    let sDate = startDate ? moment(startDate).format('YYYY-MM-DD') : null\n    let eData = endDate ? moment(endDate).format('YYYY-MM-DD') : null\n\n    var thisView = this\n    thisView.setState({ fetchingDetails: true })\n    axios\n      .all([adminService.getfilterEvents('Project', sDate, eData)])\n      .then(function (res) {\n        if (res[0]) {\n          let resData = res[0].data\n          let projects = resData.data ? resData.data : []\n          let projectsList = projects.map((eachEvent, index) => {\n            return {\n              id: eachEvent._id,\n              details: {\n                index: index,\n                id: eachEvent._id,\n                eventProjectName: eachEvent.eventProjectName,\n                eventProjectPlace: eachEvent.eventProjectPlace,\n                eventProjectDate: eachEvent.eventProjectDate,\n                eventProjectDescription:\n                  eachEvent.eventProjectDescription &&\n                  eachEvent.eventProjectDescription.length > 250\n                    ? eachEvent.eventProjectDescription.slice(0, 250) + '...'\n                    : eachEvent.eventProjectDescription.slice(0, 250),\n                date: moment(eachEvent.eventProjectDate).format(\n                  'Do MMM YYYY hh:mm A'\n                )\n              }\n            }\n          })\n          // thisView.searchInput.focus();\n          thisView.setState({ projectsList, projectsMain: projectsList })\n        }\n        thisView.setState({ fetchingDetails: false })\n      })\n      .catch(function (res) {\n        console.log(res)\n        if (res.message) console.log('An error occurred in project list')\n      })\n  }\n\n  formatProject = (cell, row) => {\n    return (\n      <NavLink to={this.props.match.path + '/' + cell.id} className='mlac-each'>\n        <div className='mlace-head'>\n          <span>{cell.eventProjectName}</span>\n          <span className='mlacer-date'>{cell.date}</span>\n          {/* <span className=\"mlac-status\">\n                        <span className={`${cell.status === \"Pending\" ? \"status-pending\" : \"\"} ${cell.status === \"In Progress\" ? \"status-inprogress\" : \"\"} ${cell.status === \"Closed\" ? \"status-closed\" : \"\"}`}>{cell.status}</span>\n                    </span> */}\n          <span className='mlac-status'>\n            <i\n              className='fa fa-edit mlac-edit'\n              onClick={e => {\n                this.updateProjectEvents(e, cell)\n              }}\n            />\n          </span>\n          <span>\n            <i\n              className='fa fa-trash mlac-delete'\n              style={{ cursor: 'pointer' }}\n              onClick={e => {\n                this.toggle(e, cell.id)\n              }}\n            />\n          </span>\n        </div>\n        <span className='mlace-content' sm={12}>\n          {cell.eventProjectDescription}\n        </span>\n      </NavLink>\n    )\n  }\n\n  deleteEvent = () => {\n    var thisView = this\n    thisView.setState({ authenticating: true, msg: !this.state.msg })\n\n    let eventProjectType = ''\n    // let contactid = this.props.match.id;\n    if (this.props.location.pathname.indexOf('projects') > -1) {\n      eventProjectType = 'Project'\n    }\n\n    this.setState({ authenticating: true })\n    axios\n      .all([adminService.deleteEvent(this.state.projectid, eventProjectType)])\n      .then(function (res) {\n        if (res[0]) {\n          let resData = res[0].data\n          if (resData.status) {\n            thisView.setState({ apiSuccess: 'Project deleted successfully ' })\n\n            // if (insertType === \"\")\n            //     thisView.props.history.push(\"/contacts\");\n            // else if (insertType === \"headOfService\")\n            //     thisView.props.history.push(\"/serviceheads\");\n\n            // setTimeout(() => window.location.reload(), thisView.props.history.push(\"/contacts\"), window.location.reload(), 4000);\n            setTimeout(\n              () => thisView.setState({ modal: !thisView.state.modal }),\n              1000\n            )\n            // setTimeout(() => thisView.getProjectEvents(), 2000);\n            thisView.getProjectEvents('', true)\n          } else {\n            thisView.setState({ apiError: resData.msg })\n          }\n        }\n        thisView.setState({ authenticating: false })\n        // setTimeout(() => window.location.reload(), thisView.setState({ modal: false }), 4000);\n      })\n      .catch(function (res) {\n        console.log(res)\n        if (res.message) console.log('An error occurred in change Password')\n      })\n  }\n\n  toggle = (e, cell) => {\n    e.preventDefault()\n    if (cell) {\n      this.setState({ projectid: cell })\n    }\n    this.setState({\n      modal: !this.state.modal\n    })\n    console.log(cell)\n  }\n\n  updateProjectEvents = (e, cell) => {\n    e.preventDefault()\n    this.props.history.push(this.props.match.path + '/update/' + cell.id)\n  }\n\n  filterProject = event => {\n    let searchText = this.state.searchText\n    if (event) searchText = event.target.value\n\n    let projectsList = []\n    if (searchText && searchText.length >= 2) {\n      projectsList = this.state.projectsMain.filter(eachProject => {\n        if (\n          eachProject.details.eventProjectName\n            .toLowerCase()\n            .indexOf(searchText.toLowerCase()) > -1 ||\n          eachProject.details.eventProjectPlace\n            .toLowerCase()\n            .indexOf(searchText.toLowerCase()) > -1 ||\n          eachProject.details.date\n            .toLowerCase()\n            .indexOf(searchText.toLowerCase()) > -1\n        )\n          return true\n        else return false\n      })\n    } else {\n      projectsList = this.state.projectsMain\n    }\n\n    this.setState({ searchText, projectsList })\n  }\n\n  filterData = (startDate, endDate) => {\n    this.getfilterProjects(startDate, endDate)\n  }\n\n  render () {\n    const { projectStatusFilter, match } = this.props\n    const {\n      projectsList,\n      fetchingDetails,\n      projectFilterStatusSelected\n    } = this.state\n    let selectedStatusFilter = projectStatusFilter\n      ? projectStatusFilter\n      : projectFilterStatusSelected\n\n    return (\n      <div className='col-span-12 mla-projects'>\n        <div className='intro-y col-span-12 xxl:col-span-9'>\n          <div className='flex items-end mt-10'>\n            {/* <h2 className='text-lg text-black font-medium'></h2> */}\n            <NavLink\n              to={match.path + '/add'}\n              className='ml-auto flex text-theme-1'\n            >\n              <Translate content='add' />\n            </NavLink>\n          </div>\n        </div>\n        <Row className='intro-y mt-5 mb-3'>\n          <Col md={8}>\n            <h2 className='font-weight-bold ml-2'>\n              {' '}\n              <Translate content='projects' />{' '}\n            </h2>\n          </Col>\n          <Col md={4}>\n            <i\n              className='fa fa-refresh mlac-refresh'\n              onClick={() => {\n                this.getProjectEvents(selectedStatusFilter.value)\n              }}\n            />\n          </Col>\n        </Row>\n\n        <Modal\n          isOpen={this.state.modal}\n          style={{ marginTop: '0px', marginLeft: '0px' }}\n        >\n          <ModalHeader\n            style={{ backgroundColor: '#253c80', color: 'white' }}\n            toggle={this.toggle}\n          >\n            Confimation{' '}\n          </ModalHeader>\n          <ModalBody>\n            {this.state.msg && (\n              <p>Are you sure you want to delete this Project</p>\n            )}\n            {this.state.apiSuccess && (\n              <div className='errormsg'>\n                <Alert color='success'>{this.state.apiSuccess}</Alert>\n              </div>\n            )}\n          </ModalBody>\n          <ModalFooter>\n            {!this.state.authenticating ? (\n              <Button\n                className=' btn btn-primary '\n                color='danger'\n                onClick={this.deleteEvent}\n              >\n                <span className='text-white'>Delete</span>\n              </Button>\n            ) : (\n              <i className='fa fa-spin fa-refresh authentication-loading' />\n            )}\n          </ModalFooter>\n        </Modal>\n\n        <Row className={'intro-y'}>\n          <Col sm md={7}></Col>\n\n          <Col sm md={5} className='date-filter'>\n            <DateRangePicker\n              enableOutsideDays={true}\n              isOutsideRange={() => false}\n              isDayHighlighted={day => day.isSame(new Date(), 'd')}\n              startDate={this.state.startDate} // momentPropTypes.momentObj or null,\n              startDateId='your_unique_start_date_id' // PropTypes.string.isRequired,\n              endDate={this.state.endDate} // momentPropTypes.momentObj or null,\n              endDateId='your_unique_end_date_id' // PropTypes.string.isRequired,\n              onDatesChange={({ startDate, endDate }) => {\n                this.setState({ startDate, endDate })\n                this.filterData(startDate, endDate)\n              }} // PropTypes.func.isRequired,\n              focusedInput={this.state.focusedInput} // PropTypes.oneOf([START_DATE, END_DATE]) or null,\n              onFocusChange={focusedInput => this.setState({ focusedInput })} // PropTypes.func.isRequired,\n            />\n          </Col>\n          {!fetchingDetails ? (\n            <Col sm md lg={12} className='mb-30'>\n              <Card className='card-statistics h-100'>\n                <Row className='mlac-search-container'>\n                  <Col xs={12} sm={12} md={6} lg={8}>\n                    {/* <Select\n                                                name=\"mlac-status-filter\" className=\"selectbox mlac-status-filter w-full flex-1\"\n                                                onChange={this.handleChange}\n                                                placeholder=\"Status Filter\"\n                                                options={projectFilterStatusOptions}\n                                                value={projectFilterStatusSelected}\n                                                isSearchable\n                                                style={{ border: 'none !important' }}\n                                                isLoading={fetchingDetails}\n                                                isDisabled={fetchingDetails}\n                                            /> */}\n                  </Col>\n                  <Col xs={12} sm={12} md={6} lg={4}>\n                    <input\n                      className='form-control mlac-search'\n                      value={this.state.field_search_input}\n                      placeholder={'Search'}\n                      onChange={this.filterProject}\n                      onKeyDown={this.filterProject}\n                      ref={input => {\n                        this.searchInput = input\n                      }}\n                    />\n                  </Col>\n                </Row>\n\n                <CardBody>\n                  <BootstrapTable\n                    data={projectsList}\n                    pagination\n                    striped\n                    condensed\n                    // search\n                  >\n                    <TableHeaderColumn\n                      className='mlac-row'\n                      dataField='details'\n                      dataFormat={this.formatProject}\n                      isKey\n                    ></TableHeaderColumn>\n                  </BootstrapTable>\n                </CardBody>\n              </Card>\n            </Col>\n          ) : (\n            <i className='fa fa-spin fa-refresh initial_loading' />\n          )}\n        </Row>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  projectStatusFilter: state.auth.projectStatusFilter\n})\n\nconst mapDispatchToProps = dispatch => ({})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Projects)\n"],"sourceRoot":""}