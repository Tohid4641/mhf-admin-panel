{"version":3,"sources":["components/containers/contacts/contacts.js"],"names":["Contacts","props","getContacts","contactNumberId","thisView","setState","fetchingDetails","axios","all","adminService","getContactList","then","res","resData","data","status","contacts","map","eachEvent","index","id","_id","sNo","firstName","role","mobileNo","email","Success_msg","apiError","catch","console","log","message","uploadFormatter","cell","row","className","to","match","path","style","cursor","onClick","toggle","deleteContactHeadService","authenticating","msg","state","insertType","location","pathname","indexOf","contactid","apiSuccess","setTimeout","window","reload","updateContact","formatName","modal","bind","this","content","isOpen","marginTop","marginLeft","backgroundColor","color","sm","md","lg","pagination","striped","condensed","search","width","dataField","isKey","dataFormat","React","Component"],"mappings":"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","file":"static/js/10.5334da3b.chunk.js","sourcesContent":["import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table'\nimport {\n  Row,\n  Col,\n  Card,\n  CardBody,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Alert\n} from 'reactstrap'\nimport adminService from '../../services/adminService'\nimport axios from 'axios'\n\nimport Translate from 'react-translate-component'\n\nimport './contacts.scss'\n\nclass Contacts extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      contacts: [],\n      // contactsMain:[],\n      fetchingDetails: false,\n      msg: true,\n      apiSuccess: '',\n      modal: false,\n      contactid: '',\n      authenticating: false\n    }\n\n    this.toggle = this.toggle.bind(this)\n  }\n  componentDidMount () {\n    this.getContacts(this.props.match.id)\n  }\n\n  getContacts = contactNumberId => {\n    var thisView = this\n    thisView.setState({ fetchingDetails: true })\n    axios\n      .all([adminService.getContactList('Event', contactNumberId)])\n      .then(function (res) {\n        if (res[0]) {\n          let resData = res[0].data\n          if (resData.status) {\n            if (resData.data) {\n              let contacts = resData.data.map((eachEvent, index) => {\n                return {\n                  id: eachEvent._id,\n                  sNo: index,\n                  firstName: eachEvent.firstName,\n                  role: eachEvent.role,\n                  mobileNo: eachEvent.mobileNo,\n                  email: eachEvent.email\n                }\n              })\n              thisView.setState({ contacts })\n            }\n\n            thisView.setState({ Success_msg: '' })\n          } else {\n            thisView.setState({ apiError: resData })\n          }\n        }\n        thisView.setState({ fetchingDetails: false })\n      })\n      .catch(function (res) {\n        console.log(res)\n        if (res.message) console.log('An error occurred in change Password')\n      })\n  }\n\n  uploadFormatter = (cell, row) => {\n    return (\n      <div className='mlace-head'>\n        <NavLink to={this.props.match.path + '/update/' + row.id}>\n          <i className='fa fa-edit mlac-edit' />\n        </NavLink>\n        &nbsp;&nbsp;&nbsp;\n        <i\n          className='fa fa-trash mlac-delete'\n          style={{ cursor: 'pointer' }}\n          onClick={() => {\n            this.toggle(row.id)\n          }}\n        />\n      </div>\n    )\n  }\n\n  deleteContactHeadService = () => {\n    var thisView = this\n    thisView.setState({ authenticating: true, msg: !this.state.msg })\n\n    let insertType = ''\n    // let id = this.props.match.params.contact_id;\n    // let contactid = this.props.match.id;\n    if (this.props.location.pathname.indexOf('serviceheads') > -1) {\n      insertType = 'headOfService'\n      //  let   contactid = this.props.match.params.serviceheads_id;\n    }\n\n    this.setState({ authenticating: true })\n    axios\n      .all([\n        adminService.deleteContactHeadService(this.state.contactid, insertType)\n      ])\n      .then(function (res) {\n        if (res[0]) {\n          let resData = res[0].data\n          if (resData.status) {\n            thisView.setState({ apiSuccess: 'Contact deleted successfully ' })\n\n            // if (insertType === \"\")\n            //     thisView.props.history.push(\"/contacts\");\n            // else if (insertType === \"headOfService\")\n            //     thisView.props.history.push(\"/serviceheads\");\n\n            // setTimeout(() => window.location.reload(), thisView.props.history.push(\"/contacts\"), window.location.reload(), 4000);\n            setTimeout(() => window.location.reload(), 2000)\n          } else {\n            thisView.setState({ apiError: resData.msg })\n          }\n        }\n        thisView.setState({ authenticating: false })\n        // setTimeout(() => window.location.reload(), thisView.setState({ modal: false }), 4000);\n      })\n      .catch(function (res) {\n        console.log(res)\n        if (res.message) console.log('An error occurred in change Password')\n      })\n  }\n\n  updateContact = (row, cell) => {\n    return (\n      <NavLink to={this.props.match.path + '/update/' + row.id}>{cell}</NavLink>\n    )\n  }\n\n  formatName = (cell, row) => {\n    return <NavLink to={this.props.match.path + '/' + row.id}>{cell}</NavLink>\n  }\n\n  toggle (id) {\n    if (id) {\n      this.setState({ contactid: id })\n    }\n    this.setState({\n      modal: !this.state.modal\n    })\n  }\n\n  render () {\n    const { match } = this.props\n    const { fetchingDetails, authenticating, apiSuccess } = this.state\n    // console.log(this.state.contacts);\n\n    return (\n      <div className='col-span-12 mla-contacts'>\n        <div className='intro-y col-span-12'>\n          <div className='intro-y flex items-end mt-10 mb-10'>\n            <h2 className='text-lg text-black font-medium'>\n              <Translate content='contact' />\n            </h2>\n            <NavLink to={match.path + '/add'} className='ml-auto flex '>\n              {' '}\n              <Translate content='add' />\n            </NavLink>\n          </div>\n\n          <Modal\n            isOpen={this.state.modal}\n            style={{ marginTop: '0px', marginLeft: '0px' }}\n          >\n            <ModalHeader\n              style={{ backgroundColor: '#253c80', color: 'white' }}\n              toggle={this.toggle}\n            >\n              Confimation{' '}\n            </ModalHeader>\n            <ModalBody>\n              {this.state.msg && (\n                <p>\n                  A{' '}\n                  <Translate content='are you sure you want to delete this contact' />\n                </p>\n              )}\n              {apiSuccess && (\n                <div className='errormsg'>\n                  <Alert color='success'>{apiSuccess}</Alert>\n                </div>\n              )}\n            </ModalBody>\n            <ModalFooter>\n              {!authenticating ? (\n                <Button\n                  className=' btn btn-primary '\n                  color='danger'\n                  onClick={this.deleteContactHeadService}\n                >\n                  <span className='text-white'>\n                    {' '}\n                    <Translate content='delete' />\n                  </span>\n                </Button>\n              ) : (\n                <i className='fa fa-spin fa-refresh authentication-loading' />\n              )}\n            </ModalFooter>\n          </Modal>\n          {/* main body */}\n          <Row className={'intro-y'}>\n            {!fetchingDetails ? (\n              <Col sm md lg={12} className='mb-30'>\n                <Card className='card-statistics h-100'>\n                  <CardBody>\n                    <BootstrapTable\n                      data={this.state.contacts}\n                      pagination\n                      striped\n                      condensed\n                      search\n                    >\n                      <TableHeaderColumn width='50' dataField='sNo' isKey>\n                        {' '}\n                        <Translate content='sNo' />\n                      </TableHeaderColumn>\n                      <TableHeaderColumn\n                        width='100'\n                        dataField='firstName'\n                        dataFormat={this.formatName}\n                      >\n                        {' '}\n                        <Translate content='name' />\n                      </TableHeaderColumn>\n                      <TableHeaderColumn width='100' dataField='role'>\n                        {' '}\n                        <Translate content='designation' />\n                      </TableHeaderColumn>\n                      <TableHeaderColumn width='100' dataField='mobileNo'>\n                        {' '}\n                        <Translate content='contact no' />\n                      </TableHeaderColumn>\n                      <TableHeaderColumn width='100' dataField='email'>\n                        {' '}\n                        <Translate content='email' />\n                      </TableHeaderColumn>\n                      <TableHeaderColumn\n                        width='100'\n                        dataFormat={this.uploadFormatter}\n                      >\n                        {' '}\n                        <Translate content='update' />\n                      </TableHeaderColumn>\n                    </BootstrapTable>\n                  </CardBody>\n                </Card>\n              </Col>\n            ) : (\n              <i className='fa fa-spin fa-refresh initial_loading' />\n            )}\n          </Row>\n        </div>\n      </div>\n    )\n  }\n}\nexport default Contacts\n"],"sourceRoot":""}